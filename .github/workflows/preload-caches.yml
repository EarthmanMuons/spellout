# This file is generated by .github/cue/ci_tool.cue; DO NOT EDIT!

name: preload-caches
"on":
  push:
    branches:
      - main
    paths:
      - '**/Cargo.lock'
      - '**/Cargo.toml'
      - .github/workflows/rust.yml
  schedule:
    - cron: 45 7 * * 1
  workflow_dispatch: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
jobs:
  flush_caches:
    name: flush caches
    permissions:
      actions: write
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
      - name: Flush main branch caches
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          gh extension install actions/gh-actions-cache
          REPO=${{ github.repository }}
          BRANCH="refs/heads/main"
          cacheKeys=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1)
          set +e
          for key in $cacheKeys; do
              gh actions-cache delete "$key" -R $REPO -B $BRANCH --confirm
          done
  actionlint:
    name: actionlint
    needs:
      - flush_caches
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
      - name: Check lints
        uses: raven-actions/actionlint@d6c9e3222b489401880e866bc6715049773b63a3
        with:
          group-result: false
          flags: -version
  rust_stable:
    name: rust / stable
    needs:
      - flush_caches
    if: always()
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        platform:
          - macos-latest
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
      - name: Install stable Rust toolchain
        uses: dtolnay/rust-toolchain@b44cb146d03e8d870c57ab64b80f04586349ca5d
        with:
          toolchain: stable
      - name: Cache dependencies
        uses: Swatinem/rust-cache@988c164c3d0e93c4dbab36aaf5bbeb77425b2894
        with:
          shared-key: stable-${{ matrix.platform }}
        timeout-minutes: 5
      - name: Install cargo-nextest
        uses: taiki-e/install-action@1d74f337f279f52e54c352ebe5b96eaa36c948d3
        with:
          tool: cargo-nextest
      - name: Check packages and dependencies for errors
        run: cargo check --locked --all-targets
  rust_msrv:
    name: rust / msrv
    needs:
      - flush_caches
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
      - id: msrv
        name: Get MSRV from package metadata
        run: awk -F '"' '/rust-version/{ print "version=" $2 }' Cargo.toml >> "$GITHUB_OUTPUT"
      - name: Install ${{ steps.msrv.outputs.version }} Rust toolchain
        uses: dtolnay/rust-toolchain@b44cb146d03e8d870c57ab64b80f04586349ca5d
        with:
          toolchain: ${{ steps.msrv.outputs.version }}
      - name: Install nightly Rust toolchain
        uses: dtolnay/rust-toolchain@b44cb146d03e8d870c57ab64b80f04586349ca5d
        with:
          toolchain: nightly
      - name: Resolve minimal dependency versions instead of maximum
        run: cargo +nightly update -Z direct-minimal-versions
      - name: Set override to MSRV Rust
        run: rustup override set ${{ steps.msrv.outputs.version }}
      - name: Cache dependencies
        uses: Swatinem/rust-cache@988c164c3d0e93c4dbab36aaf5bbeb77425b2894
        with:
          shared-key: msrv-ubuntu-latest
        timeout-minutes: 5
      - name: Install cargo-nextest
        uses: taiki-e/install-action@1d74f337f279f52e54c352ebe5b96eaa36c948d3
        with:
          tool: cargo-nextest
      - name: Check packages and dependencies for errors
        run: cargo check --locked --all-targets
